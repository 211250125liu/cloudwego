// Code generated by hertz generator.

package demo

import (
	"context"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"

	"github.com/cloudwego/hertz/pkg/app"
)

// GetMessage .
// @router /getMessage [GET]
func GetMessage(ctx context.Context, c *app.RequestContext) {
	//var err error
	//var req demo.Request
	//err = c.BindAndValidate(&req)
	//if err != nil {
	//	c.String(consts.StatusBadRequest, err.Error())
	//	return
	//}
	//
	//resp := new(demo.Response)
	//
	//c.JSON(consts.StatusOK, resp)
	cli := initGenericClient()
	/*httpReq, err := adaptor.GetCompatRequest(c.GetRequest())
	if err != nil {
		panic("get http req failed")
	}
	/*customReq, err := generic.FromHTTPRequest(httpReq)
	if err != nil {
		panic("get custom req failed")
	}*/
	resp, err := cli.GenericCall(ctx, "getMessage", "")
	//resp, err := cli.GenericCall(ctx, "GetMessage", customReq)
	if err != nil {
		panic("generic call failed")
	}

	//realResp := resp.(*generic.HTTPResponse)

	c.JSON(consts.StatusOK, resp)
}

func initGenericClient() genericclient.Client {
	p, err := generic.NewThriftFileProvider("../idl/service1.thrift")
	if err != nil {
		panic(err)
	}
	// 构造 http 类型的泛化调用
	//g, err := generic.HTTPThriftGeneric(p)
	//if err != nil {
	//	panic(err)
	//}
	//cli, err := genericclient.NewClient("destServiceName", g,
	//	client.WithHostPorts("127.0.0.1:8889"))
	//if err != nil {
	//	panic(err)
	//}
	//return cli

	// 构造 JSON 请求和返回类型的泛化调用
	g, err := generic.JSONThriftGeneric(p)
	if err != nil {
		panic(err)
	}
	cli, err := genericclient.NewClient("destServiceName",
		g, client.WithHostPorts("127.0.0.1:8889"),
		client.WithTag("k", "v9"))
	if err != nil {
		panic(err)
	}
	return cli
}
